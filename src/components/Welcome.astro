---
import '../css/Welcome.css';
import {
  IconCSS,
  IconReact,
  IconTailwind,
  IconTypescript,
} from './icons/technologies';
---

<script>
  window.addEventListener('DOMContentLoaded', function () {
    const canvas: any = document.getElementById('canvas-particles');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    let particles = [];

    let mouse = {
      x: null,
      y: null,
      radius: (canvas.height / 80) * (canvas.width / 80),
    };

    window.addEventListener('mousemove', function (e) {
      mouse.x = e.x;
      mouse.y = e.y;
    });

    window.addEventListener('mouseout', function (e) {
      mouse.x = undefined;
      mouse.y = undefined;
    });

    window.addEventListener('resize', function () {
      canvas.width = innerWidth;
      canvas.height = innerHeight;
      mouse.radius = (canvas.width / 80) * (canvas.height / 80);
      init();
    });

    class Particle {
      x: number;
      y: number;
      directionX: number;
      directionY: number;
      size: number;
      colour: string;

      constructor(
        x: number,
        y: number,
        directionX: number,
        directionY: number,
        size: number,
        colour: string
      ) {
        this.x = x;
        this.y = y;
        this.directionX = directionX;
        this.directionY = directionY;
        this.size = size;
        this.colour = colour;
      }

      draw() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, Math.PI * 2, false);
        ctx.fillStyle = '#4dabf7';
        ctx.fill();
      }

      update() {
        if (this.x > canvas.width || this.x < 0) {
          this.directionX = -this.directionX;
        }

        if (this.y > canvas.height || this.y < 0) {
          this.directionY = -this.directionY;
        }

        let dx = mouse.x - this.x;
        let dy = mouse.y - this.y;
        let distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < mouse.radius + this.size) {
          if (mouse.x < this.x && this.x < canvas.width - this.size * 10) {
            this.x += 10;
          }

          if (mouse.x > this.x && this.x > this.size * 10) {
            this.x -= 10;
          }

          if (mouse.y < this.y && this.y < canvas.height - this.size * 10) {
            this.y += 10;
          }

          if (mouse.y > this.y && this.y > this.size * 10) {
            this.y -= 10;
          }
        }

        this.x += this.directionX;
        this.y += this.directionY;

        this.draw();
      }
    }

    function init() {
      particles = [];
      let numberOfParticles = (canvas.height * canvas.width) / 8000;

      for (let i = 0; i < numberOfParticles; i++) {
        let size = Math.random() * 5 + 1;
        let x = Math.random() * (innerWidth - size * 2 - size * 2) + size * 2;
        let y = Math.random() * (innerHeight - size * 2 - size * 2) + size * 2;
        let directionX = Math.random() * 5 - 2.5;
        let directionY = Math.random() * 5 - 2.5;
        let colour = '#8C5523';

        particles.push(
          new Particle(x, y, directionX, directionY, size, colour)
        );
      }
    }

    function connect() {
      let opacity = 1;
      let connectors = [];

      for (let a = 0; a < particles.length; a++) {
        for (let b = 0; b < particles.length; b++) {
          let distance =
            (particles[a].x - particles[b].x) *
              (particles[a].x - particles[b].x) +
            (particles[a].y - particles[b].y) *
              (particles[a].y - particles[b].y);

          if (distance < ((canvas.width / 6) * canvas.height) / 6) {
            opacity = 1 - distance / 20000;
            ctx.strokeStyle = 'rgba(173, 181, 189, ' + opacity + ')';
            ctx.lineWidth = 1;
            ctx.beginPath();
            ctx.moveTo(particles[a].x, particles[a].y);
            ctx.lineTo(particles[b].x, particles[b].y);
            ctx.stroke();
          }
        }
      }
    }

    function animate() {
      requestAnimationFrame(animate);
      ctx.clearRect(0, 0, innerWidth, innerHeight);

      for (let i = 0; i < particles.length; i++) {
        particles[i].update();
      }

      connect();
    }

    init();
    animate();

    // const img: HTMLElement = document.querySelector('.welcomeUserImg');
    // const height = img.clientHeight;
    // const width = img.clientWidth;

    // img.addEventListener('mousemove', function (e) {
    //   const { layerX, layerY } = e;
    //   const yRotation = ((layerX - width / 2) / width) * 46;
    //   const xRotation = ((layerY - height / 2) / height) * 46;
    //   const string = `
    //     perspective(500px)
    //     scale(1.1)
    //     rotateX(${xRotation}deg)
    //     rotateY(${yRotation}deg)`;

    //   img.style.transform = string;
    // });

    // img.addEventListener('mouseout', function () {
    //   img.style.transform = `
    // perspective(500px)
    // scale(1)
    // rotateX(0)
    // rotateY(0)`;
    // });
  });
</script>

<section
  class='min-h-[100dvh] h-[100vh] w-full flex justify-center items-center bg-[radial-gradient(#00000010_3%,#fff_0)] bg-[length:5rem_5rem] dark:bg-[radial-gradient(#292929de_3%,#121212_0)]'
>
  <canvas class='hidden md:block opacity-70' id='canvas-particles'> </canvas>
  <main
    class='absolute top-0 left-0 flex items-center justify-center h-[100dvh] w-full'
  >
    <article class='w-[35rem] flex flex-col gap-2 justify-center items-center'>
      <div
        class={`h-[182px] w-[182px] bg-contain bg-[url("/user.webp")] relative rounded-[30%_70%_24%76%/_65%_28%_72%_35%] welcomeUserImg`}
      >
        <div class='absolute bottom-4 left-0 -translate-x-1/2 top-auto'>
          <div class='bubble shadow-[4px_4px_8px_1px_#0000003d]'>
            <IconTypescript height='28' />
          </div>
        </div>

        <div class='absolute top-[-1.2rem] left-1/4 -translate-x-1/2'>
          <div class='bubble shadow-[4px_4px_8px_1px_#0000003d]'>
            <IconReact height='28' />
          </div>
        </div>

        <div class='absolute top-auto left-auto bottom-4 right-[-.5rem]'>
          <div class='bubble shadow-[4px_4px_8px_1px_#0000003d]'>
            <IconTailwind height='30' />
          </div>
        </div>

        <div class='absolute bottom-auto left-auto top-4 right-[-.5rem]'>
          <div class='bubble shadow-[4px_4px_8px_1px_#0000003d]'>
            <IconCSS height='26' } />
          </div>
        </div>
      </div>

      <div class='h-[60%] w-[95%] mt-2 text-center'>
        <h1
          class='font-mono text-[2.7rem] tracking-[-1.3px] text-black dark:text-white'
        >
          Hello <span class='text-blue-500 dark:text-blue-200'>World</span>!
        </h1>
        <p
          class='mt-2 text-[1.45rem] tracking-[-1px] leading-[1.7] text-black dark:text-gray-300'
        >
          I<span class='text-blue-500 dark:text-blue-200'>'</span>m Angel. <span
            class='animated-text'
          >
            Software Engineer</span
          >
          <span class='font-mono text-base text-gray-400 dark:text-white mx-1.5'
            >&&</span
          > Frontend developer, that loves to build gorgeous <span
            class='text-blue-400 dark:text-blue-300'>software</span
          >
          experiences<span class='text-blue-400 dark:text-blue-200'>;</span>
        </p>
      </div>
    </article>
  </main>
</section>
